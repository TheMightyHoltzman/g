<?php

namespace AppBundle\Repository;
use Doctrine\ORM\Query\ResultSetMapping;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * PostRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PostRepository extends \Doctrine\ORM\EntityRepository
{
    const MAX_RESULTS = 15;

    public function getBlogPaginator($page, $category = null)
    {
        $qb =$this->getBlogQb($page);

        if ($category) {
            $qb->andWhere('(b.category = :category )')
                ->setParameter('category', $category);
        }

        return new Paginator($qb, false);
    }

    public function getBlogQb($page)
    {
        --$page;
        return $this->createQueryBuilder('b')
            ->andWhere('b.isPublished = 1')
            ->addOrderBy('b.publishedAt', 'DESC')
            ->setMaxResults(self::MAX_RESULTS)
            ->setFirstResult($page*self::MAX_RESULTS);
    }

    public function getLatest($category = 'cartoon')
    {
        return $this->findOneBy(
            array('category'=>$category),
            array('publishedAt' => 'DESC')
        );;
    }

    public function getNeighbours($id, $category = 'cartoon')
    {
        $previous = $this->getEntityManager()->createQuery("SELECT max(p.id) as id FROM AppBundle:Post p where p.isPublished = TRUE and p.category='$category' and p.id < $id")->getSingleScalarResult();
        $next     = $this->getEntityManager()->createQuery("SELECT min(p.id) as id FROM AppBundle:Post p where p.isPublished = TRUE and p.category='$category' and p.id > $id")->getSingleScalarResult();

        return ['previous' => $previous, 'next' => $next];
    }

    public function getRandom($category = 'cartoon', $exclude = [])
    {
        # set entity name
        $table = $this->getClassMetadata()
            ->getTableName();

        # create rsm object
        $rsm = new ResultSetMapping();
        $rsm->addEntityResult($this->getEntityName(), 'p');
        $rsm->addFieldResult('p', 'id', 'id');

        # make query
        /** @noinspection SqlResolve */
        $id = $this->getEntityManager()->createNativeQuery("SELECT p.id FROM {$table} p ORDER BY RAND() LIMIT 0, 1", $rsm)->getSingleResult();
        return $this->findOneBy(['id' => $id]);
    }
}
